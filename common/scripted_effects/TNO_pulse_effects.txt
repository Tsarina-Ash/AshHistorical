first_every_week_script = {
	ZZZ = {
		update_market = yes
	}

	# Allow suppressed TNO alerts to reappear
	every_country = {
		if = {
			limit = { is_ai = no }
			TNO_alert_suppression_weekly_tick = yes
		}
	}
}

first_every_month_script = {
	log = "[GetDateText]: [Root.GetName]: first_every_month_script"
	add_to_variable = { month_counter = 1 }
	if = {
		limit = {
			check_variable = {
				month_counter = 13
			}
		}
		set_variable = { month_counter = 1 }
		first_every_year_script = yes
	}
	#add_manpower = -100 #Why? -Pacifica #I think its to keep Anarchy Island on 0 Recruit manpower IG - OPAsian

	ZZZ =  {
		add_to_variable = { econ_graph_month = 1 }
	}

	every_country = {
		set_variable = { total_pop_m = 0 }
		set_variable = { total_core_pop_m = 0 }
		every_owned_state = {
			set_temp_variable = { spm = state_population_k }
			divide_temp_variable = { spm = 1000 }
			add_to_variable = { PREV.total_pop_m = spm }
			if = {
				limit = { is_core_of = THIS }
				add_to_variable = { PREV.total_core_pop_m = spm }
			}
		}
		set_variable = { total_ncore_pop_m = total_pop_m }
		subtract_from_variable = { total_ncore_pop_m = total_core_pop_m }
	}

	every_country = {
		if = {
			limit = {
				any_neighbor_country = {
					OR = {
						check_variable = { THIS.num_divisions > THIS.TNOLimiterIndustry }
						check_variable = { THIS.TNOLimiterIndustry > ROOT.TNOLimiterIndustry }
					}
				}
			}
			TNO_div_limiter_escalator_mechanism_run = yes
		}
		TNO_div_limiter_calculate_unit_cap = yes
	}

	ZZZ = {
		econ_recompile_all_spheres = yes
		generate_econ_rankings = yes
		econ_get_world_gdp = yes
	}

	ZZZ_econ_inflation_cycling_calculation = yes 

	clear_array = GLOBAL.econ_sphere_leaders # necessary for some calcs :) 
	
	every_country = {
		if = {
			limit = {
				econ_can_use_economy_system = yes
			}
			if = {
				limit = { NOT = { has_idea = economy_multiplicative_modifiers_base } }
				add_ideas = economy_multiplicative_modifiers_base
			}
			societal_development_monthly_check = yes # update policy effectiveness first! 
			econ_calculations_ON_MONTHLY = yes
			calculate_consumer_goods_need = yes #Do this after consumption so the base value won't suddenly change on the player
		}
	}

	every_country = {
		limit = {
			check_variable = { GDP = 0.0 } #already converted to billion
		}
		generate_country_gdp = yes
	}
}

societal_development_monthly_check = {
	#Keeping this around as a template

	# TNO_process_policy_effectiveness_monthly_tick = yes

	# add_to_variable = { admin_efficiency_counter = admin_efficiency_monthly_change }
	# add_to_variable = { admin_efficiency_counter = modifier@admin_efficiency_monthly_rate }
	# add_to_variable = { academic_base_counter = academic_base_monthly_change }
	# add_to_variable = { academic_base_counter = modifier@academic_base_monthly_rate }
	# add_to_variable = { agriculture_counter = agriculture_monthly_change }
	# add_to_variable = { agriculture_counter = modifier@agriculture_monthly_rate }
	# add_to_variable = { army_professionalism_counter = army_professionalism_monthly_change }
	# add_to_variable = { army_professionalism_counter = modifier@army_professionalism_monthly_rate }
	# add_to_variable = { research_facilities_counter = research_facilities_monthly_change }
	# add_to_variable = { research_facilities_counter = modifier@research_facilities_monthly_rate }
	# add_to_variable = { industrial_expertise_counter = industrial_expertise_monthly_change }
	# add_to_variable = { industrial_expertise_counter = modifier@industrial_expertise_monthly_rate }
	# add_to_variable = { industrial_equipment_counter = industrial_equipment_monthly_change }
	# add_to_variable = { industrial_equipment_counter = modifier@industrial_equipment_monthly_rate }

	# if = {
	# 	limit = { check_variable = { admin_efficiency_counter > 239 } }
	# 	country_event = societal_development.1102
	# 	add_to_variable = { admin_efficiency_counter = -240 }
	# 	multiply_variable = { admin_efficiency_monthly_change = 0.25 }
	# }
	# else_if = {
	# 	limit = { check_variable = { admin_efficiency_counter < -239 } }
	# 	country_event = societal_development.1103
	# 	add_to_variable = { admin_efficiency_counter = 240 }
	# 	multiply_variable = { admin_efficiency_monthly_change = 0.25 }
	# }

	# if = {
	# 	limit = { check_variable = { academic_base_counter > 239 } }
	# 	country_event = societal_development.1104
	# 	add_to_variable = { academic_base_counter = -240 }
	# 	multiply_variable = { academic_base_monthly_change = 0.25 }
	# }
	# else_if = {
	# 	limit = { check_variable = { academic_base_counter < -239 } }
	# 	country_event = societal_development.1105
	# 	add_to_variable = { academic_base_counter = 240 }
	# 	multiply_variable = { academic_base_monthly_change = 0.25 }
	# }

	# if = {
	# 	limit = { check_variable = { research_facilities_counter > 239 } }
	# 	country_event = societal_development.1106
	# 	add_to_variable = { research_facilities_counter = -240 }
	# 	multiply_variable = { research_facilities_monthly_change = 0.25 }
	# }
	# else_if = {
	# 	limit = { check_variable = { research_facilities_counter < -239 } }
	# 	country_event = societal_development.1107
	# 	add_to_variable = { research_facilities_counter = 240 }
	# 	multiply_variable = { research_facilities_monthly_change = 0.25 }
	# }

	# if = {
	# 	limit = { check_variable = { industrial_expertise_counter > 239 } }
	# 	country_event = societal_development.1110
	# 	add_to_variable = { industrial_expertise_counter = -240 }
	# 	multiply_variable = { industrial_expertise_monthly_change = 0.25 }
	# }
	# else_if = {
	# 	limit = { check_variable = { industrial_expertise_counter < -239 } }
	# 	country_event = societal_development.1111
	# 	add_to_variable = { industrial_expertise_counter = 240 }
	# 	multiply_variable = { industrial_expertise_monthly_change = 0.25 }
	# }

	# if = {
	# 	limit = { check_variable = { industrial_equipment_counter > 239 } }
	# 	country_event = societal_development.1112
	# 	add_to_variable = { industrial_equipment_counter = -240 }
	# 	multiply_variable = { industrial_equipment_monthly_change = 0.25 }
	# }
	# else_if = {
	# 	limit = { check_variable = { industrial_equipment_counter < -239 } }
	# 	country_event = societal_development.1113
	# 	add_to_variable = { industrial_equipment_counter = 240 }
	# 	multiply_variable = { industrial_equipment_monthly_change = 0.25 }
	# }

	# if = {
	# 	limit = { check_variable = { agriculture_counter > 239 } }
	# 	country_event = societal_development.1114
	# 	add_to_variable = { agriculture_counter = -240 }
	# 	multiply_variable = { agriculture_monthly_change = 0.25 }
	# }
	# else_if = {
	# 	limit = { check_variable = { agriculture_counter < -239 } }
	# 	country_event = societal_development.1115
	# 	add_to_variable = { agriculture_counter = 240 }
	# 	multiply_variable = { agriculture_monthly_change = 0.25 }
	# }

	# if = {
	# 	limit = { check_variable = { army_professionalism_counter > 239 } }
	# 	country_event = societal_development.1116
	# 	add_to_variable = { army_professionalism_counter = -240 }
	# 	multiply_variable = { army_professionalism_monthly_change = 0.25 }
	# }
	# else_if = {
	# 	limit = { check_variable = { army_professionalism_counter < -239 } }
	# 	country_event = societal_development.1117
	# 	add_to_variable = { army_professionalism_counter = 240 }
	# 	multiply_variable = { army_professionalism_monthly_change = 0.25 }
	# }
}

calculate_building_variables = {
	clear_variable = total_synthetic_refinery
	# clear_variable = total_schools
	# clear_variable = total_offices
	# clear_variable = total_hospitals
	# clear_variable = total_barracks
	# clear_variable = total_prisons
	clear_variable = total_thermo_plants
	clear_variable = total_nuclear_reactors
	
	# clear_variable = state_without_racks
	# clear_variable = state_without_prisons
	# set_variable = {school_in_best_empty_state = 0}
	# set_variable = {office_in_best_empty_state = 0}
	# set_variable = {hospital_in_best_empty_state = 0}
	
	# set_variable = { schools_country_effect = 0 }
	# set_variable = { offices_country_effect = 0 }
	# set_variable = { hospitals_country_effect = 0 }
	# set_variable = { barracks_country_effect = 0 }
	# set_variable = { prisons_country_effect = 0 }
	# set_variable = {altered_num_owned_states = num_owned_states}
	set_variable = {total_slot_calculation = 0}

	every_owned_state = {
		if = { 
			limit = { NOT = { check_variable = { TNO_lights = 2 } } }
			add_to_variable = { PREV.total_synthetic_refinery = non_damaged_building_level@synthetic_refinery }
			# add_to_variable = { PREV.total_schools = non_damaged_building_level@schools }
			# add_to_variable = { PREV.total_offices = non_damaged_building_level@offices }
			# add_to_variable = { PREV.total_hospitals = non_damaged_building_level@hospitals }
			# add_to_variable = { PREV.total_barracks = non_damaged_building_level@barracks }
			# add_to_variable = { PREV.total_prisons = non_damaged_building_level@prisons }
		}
		add_to_variable = { PREV.total_thermo_plants = non_damaged_building_level@thermoelectric_plant }
		add_to_variable = { PREV.total_nuclear_reactors = non_damaged_building_level@nuclear_reactor }
	}

	if = {
		limit = { has_country_flag = TNO_eliminate_building_demand }
		# set_variable = { schools_research_modifier = 0 }
		# set_variable = { offices_PP_modifier = 0 }
		# set_variable = { hospitals_pop_growth_modifier = 0 }
		# set_variable = { barracks_manpower_modifier = 0 }
		# set_variable = { barracks_org_modifier = 0 }
		# set_variable = { prisons_stab_modifier = 0 }
	}
	else = {
		
		# set_variable = { school_covered_province = 0 }
		# set_variable = { office_covered_province = 0 }
		# set_variable = { hospital_covered_province = 0 }
		# set_variable = { barrack_covered_province = 0 }
		# set_variable = { prison_covered_province = 0 }
		set_variable = { slot_multiplier = modifier@global_building_slots_factor }
		add_to_variable = { slot_multiplier = 1 }
		set_variable = { slot_addition = modifier@global_building_slots }
		

		
		every_owned_state = {
			set_temp_variable = {local_slot_multiplier = modifier@local_building_slots_factor}
			add_to_temp_variable = {local_slot_multiplier = 1}
			set_temp_variable = {local_slots = modifier@local_building_slots}
			add_to_temp_variable = { local_slots = PREV.slot_addition }
			multiply_temp_variable = {local_slots = local_slot_multiplier}
			multiply_temp_variable = {local_slots = PREV.slot_multiplier}
			if = {limit = {check_variable = {local_slots < 1}}
				add_to_variable = {PREV.altered_num_owned_states = -1}
				#If a state has no building slot, it's deduced from your total number of states
			}
			#Calculation so that number of building required < number of building you can possibly build
			if = {limit = {check_variable = {local_slots >1}}
				round_temp_variable = local_slots
			}
			clamp_temp_variable = {
				var = local_slots
				max = 5
				min = 0
			}
			add_to_variable = {PREV.total_slot_calculation = local_slots}
		}
	}


	set_variable = { buildings_power_demand = num_of_enrichment_plants }
	multiply_variable = { buildings_power_demand = 4 }
	set_variable = { num_of_silos_power_demand = num_of_silos }
	multiply_variable = { num_of_silos_power_demand = 2 }

	add_to_variable = { buildings_power_demand = num_of_silos_power_demand }
	add_to_variable = { buildings_power_demand = used_naval_facs }
	add_to_variable = { buildings_power_demand = total_synthetic_refinery }
	# add_to_variable = { buildings_power_demand = total_schools }
	# add_to_variable = { buildings_power_demand = total_offices }
	# add_to_variable = { buildings_power_demand = total_hospitals }
	# add_to_variable = { buildings_power_demand = total_barracks }
	# add_to_variable = { buildings_power_demand = total_prisons }

	divide_variable = { buildings_power_demand = 2 }

	set_variable = { buildings_oil_demand = total_thermo_plants }

	set_variable = { buildings_uranium_demand = num_of_enrichment_plants }
	multiply_variable = { buildings_uranium_demand = 6 }
	set_variable = { num_of_nuclear_reactors_uranium_demand = total_nuclear_reactors }
	multiply_variable = { num_of_nuclear_reactors_uranium_demand = 4 }
	add_to_variable = { buildings_uranium_demand = num_of_nuclear_reactors_uranium_demand }

	# calculate_needed_schools = yes
	# calculate_needed_hospitals = yes
	# calculate_needed_prisons = yes
	# calculate_needed_barracks = yes
	# calculate_needed_offices = yes
	calculate_building_satisfaction = yes
}
